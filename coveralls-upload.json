{"repo_token":"1gx6MEe2MHUT1DzwCUhiThQlalCq53kz3","git":{"branch":"master","head":{"id":"11377bcb7730b3596669fcc7f3efcb17e1633ed2","author_name":"Rob van der Lee","author_email":"EpicSoftworks@gmail.com","committer_name":"Rob van der Lee","committer_email":"EpicSoftworks@gmail.com","message":"Created unit testing for the command and factory, moved config to its respective file and ugly hacked the getters for now :smiley:"},"remotes":[{"name":"composer","url":"git@github.com:rvdlee-salesupply\/DoctrineDataFixtureModule.git"},{"name":"origin","url":"git@github.com:rvdlee-salesupply\/DoctrineDataFixtureModule.git"}]},"run_at":"2018-03-06 21:36:09 +0000","source_files":[{"name":"src\/DoctrineDataFixtureModule\/Command\/ImportCommand.php","source":"<?php\n\nnamespace DoctrineDataFixtureModule\\Command;\n\nuse Doctrine\\Common\\DataFixtures\\Loader;\nuse Doctrine\\ORM\\EntityManager;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Doctrine\\Common\\DataFixtures\\Executor\\ORMExecutor;\nuse Doctrine\\Common\\DataFixtures\\Purger\\ORMPurger;\nuse Laminas\\ServiceManager\\ServiceLocatorInterface;\n\n\/**\n * Command for generate migration classes by comparing your current database schema\n * to your mapping information.\n *\n * @license http:\/\/www.opensource.org\/licenses\/lgpl-license.php LGPL\n * @link    www.doctrine-project.org\n * @since   2.0\n * @author  Jonathan Wage <jonwage@gmail.com>\n * @author  Rob van der Lee <r.vdlee@salesupply.com>\n *\/\nclass ImportCommand extends Command\n{\n    \/**\n     * @var array\n     *\/\n    protected $paths;\n\n    \/**\n     * @var EntityManager\n     *\/\n    protected $entityManager;\n    \n    \/**\n     * The Zend ServiceManager\n     * @var ServiceLocatorInterface\n     *\/\n    protected $serviceLocator;\n\n    \/**\n     * @var int\n     *\/\n    const PURGE_MODE_TRUNCATE = 2;\n\n    \/**\n     * ImportCommand constructor.\n     * @param ServiceLocatorInterface $serviceLocator\n     *\/\n    public function __construct(ServiceLocatorInterface $serviceLocator)\n    {\n        $this->setServiceLocator($serviceLocator);\n\n        parent::__construct();\n    }\n\n    \/**\n     * Configure the command\n     *\/\n    protected function configure()\n    {\n        parent::configure();\n\n        $this->setName('data-fixture:import')\n            ->setDescription('Import Data Fixtures')\n            ->setHelp('The import command Imports data-fixtures')\n            ->addOption('append', null, InputOption::VALUE_NONE, 'Append data to existing data.')\n            ->addOption('purge-with-truncate', null, InputOption::VALUE_NONE, 'Truncate tables before inserting data');\n    }\n\n    \/**\n     * @param InputInterface $input\n     * @param OutputInterface $output\n     * @return int|null|void\n     *\/\n    public function execute(InputInterface $input, OutputInterface $output)\n    {\n        \/** @var Loader $loader *\/\n        $loader = new Loader();\n        \/** @var ORMPurger $purger *\/\n        $purger = new ORMPurger();\n\n        \/\/ Accept option purge-with-truncate\n        if ($input->getOption('purge-with-truncate')) {\n            $purger->setPurgeMode(self::PURGE_MODE_TRUNCATE);\n        }\n\n        \/** @var ORMExecutor $executor *\/\n        $executor = new ORMExecutor($this->getEntityManager(), $purger);\n\n        foreach ($this->getPaths() as $key => $value) {\n            $loader->loadFromDirectory($value);\n        }\n\n        $executor->execute($loader->getFixtures(), $input->getOption('append'));\n    }\n\n    \/**\n     * @return array\n     *\/\n    public function getPaths(): array\n    {\n        return $this->paths;\n    }\n\n    \/**\n     * @param array $paths\n     *\/\n    public function setPaths(array $paths): void\n    {\n        $this->paths = $paths;\n    }\n\n    \/**\n     * @return EntityManager\n     *\/\n    public function getEntityManager(): EntityManager\n    {\n        return $this->entityManager;\n    }\n\n    \/**\n     * @param EntityManager $entityManager\n     *\/\n    public function setEntityManager(EntityManager $entityManager): void\n    {\n        $this->entityManager = $entityManager;\n    }\n\n    \/**\n     * @return ServiceLocatorInterface\n     *\/\n    public function getServiceLocator(): ServiceLocatorInterface\n    {\n        return $this->serviceLocator;\n    }\n\n    \/**\n     * @param ServiceLocatorInterface $serviceLocator\n     *\/\n    public function setServiceLocator(ServiceLocatorInterface $serviceLocator): void\n    {\n        $this->serviceLocator = $serviceLocator;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,1,null,1,1,1,1,1,1,null,null,null,null,null,null,null,null,null,1,null,1,null,null,1,1,null,null,null,1,null,1,1,null,null,1,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,1,null]},{"name":"src\/DoctrineDataFixtureModule\/Service\/FixtureFactory.php","source":"<?php\n\nnamespace DoctrineDataFixtureModule\\Service;\n\nuse Interop\\Container\\ContainerInterface;\nuse Laminas\\ServiceManager\\Factory\\FactoryInterface;\n\n\/**\n * Factory for Fixtures\n *\n * @license MIT\n * @link    www.doctrine-project.org\n * @author  Martin Shwalbe <martin.shwalbe@gmail.com>\n * @author  Rob van der Lee <r.vdlee@salesupply.com>\n *\/\nclass FixtureFactory implements FactoryInterface\n{\n    \/**\n     * @param ContainerInterface $container\n     * @param string $requestedName\n     * @return bool\n     *\/\n    public function canCreate(ContainerInterface $container, $requestedName)\n    {\n        return class_exists($requestedName);\n    }\n\n    \/**\n     * @param ContainerInterface $container\n     * @param string $requestedName\n     * @param array|null $options\n     * @return array|object\n     * @throws \\Psr\\Container\\ContainerExceptionInterface\n     * @throws \\Psr\\Container\\NotFoundExceptionInterface\n     *\/\n    public function __invoke(ContainerInterface $container, $requestedName, array $options = null)\n    {\n        return $this->getOptions($container, 'fixtures');\n    }\n\n    \/**\n     * @param ContainerInterface $container\n     * @param $key\n     * @return array\n     * @throws \\Psr\\Container\\ContainerExceptionInterface\n     * @throws \\Psr\\Container\\NotFoundExceptionInterface\n     *\/\n    public function getOptions(ContainerInterface $container, $key)\n    {\n        $options = $container->get('config');\n        if (!isset($options['doctrine']['fixture'])) {\n            return array();\n        }\n        \n        return $options['doctrine']['fixture'];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,2,2,1,null,null,1,null,null]}],"environment":{"packagist_version":"2.0.0"}}